@page "/"
@page "/error/{errorMsg}"
@using LightBlueFox.Games.Poker;
@using LightBlueFox.Games.Poker.Utils;
@using System.Text.RegularExpressions;
@inject NavigationManager NM;

@code{
	string name;

	public const int MAX_NAME_LEN = 20;
	public const int MAX_ID_LEN = 10;

	[Parameter]
	public string? errorMsg { get; set; }

	public string? id { get; set; } = null;
	public string isErrorVisible {
		get
		{
			return string.IsNullOrEmpty(errorMsg?.Trim()) ? "none" : "inline-block";
		}
	}

	public bool IsInputValid
	{
		get; set;
	}

	private void updateValid()
	{
		IsInputValid = Regex.IsMatch(id ?? "", "^[a-zA-Z0-9_.-]{1," + MAX_ID_LEN + "}") && Regex.IsMatch(name ?? "", "^[a-zA-Z0-9_. -]{1," + MAX_NAME_LEN + "}");
	}

	void joinGame()
	{
		Console.WriteLine("joinGame ({0})", name);
		NM.NavigateTo("/game/" + id + "/" + name);
	}


	public Index()
	{
		DeckGenerator dg = new();
		id = GameManager.getAnyRunningGame();
		hand = dg.PopRandom(2);
		table = dg.PopRandom(5);
	}

	private LightBlueFox.Games.Poker.Card[] hand;
	private LightBlueFox.Games.Poker.Card[] table;
}


<style>


	body{
		background-color: darkgreen;
		
	}

	.menu {
		background-color: white;
		border: 3px solid black;
		display: inline-block;
		border-radius: 5px;
		padding: 55px 5%;
		width: 75vw;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		align-content: center;
		max-width: 60vh;
		max-height: 60vw;
	}

	.menu * {
		width: 100%;
		text-align: center;
		font-size: 30px;
		margin-top: 15px;
		margin-bottom: 15px;
	}

	.menu input {
		width: calc(100% - 20px);
		text-align: left;
		padding: 10px;
		border: 0px solid black;
		border-radius: 5px;
		background: #dedede
	}

	.menu input:hover {
		background-color: #cecece;
	}

	.menu button {
		width: 40%;
		margin-left: 30%;
		background-color: green;
		border: 0px solid black;
		color: white;
		padding: 30px 10px;
		border-radius: 5px;
		transition: ease-out background 0.2s;
	}

	

	.menu button:enabled:hover{
		background-color: darkgreen;
	}	
	
	.menu button:disabled {
		background-color: grey;
		color: lightgrey;
	}

	.error {
		display: inline-block;
		background-color: #f54242;
		min-width: 25vw;
		color: white;
		font-weight: bold;
		font-size: 20px;
		padding: 15px;
		border-radius: 15px;
	}

	.card{
		width: 230px;
		position: absolute;
		top: 50%;
		left: 50%;
		z-index: -1;
		transition: width 0.5s;
	}

	.card:hover {
		width: 250px;
	}

	.h0{
		transform: translate(-180%, -50%) rotate(-30deg) !important;
	}

	.h1 {
		transform: translate(-160%, -50%) rotate(-15deg) !important;
	}

	.b1 {
		transform: translate(50%, 10%) rotate(25deg) !important;
	}

	.b2 {
		transform: translate(50%, 10%) rotate(15deg) !important;
	}

	.table{
		transition: width 0.5s;
		position: absolute;
		width: 130px;
		left: 50%;
		top: 11%;
		z-index: -1;
	}
	.table:hover{
		width: 160px;
	}

	.t0{
		transform: translate(-20%,10%) rotate(-20deg) !important;	
	}

	.t1 {
		transform: translate(-10%,5%) rotate(-10deg) !important;
	}

	.t2 {
		transform: translate(0%,0%) rotate(0deg) !important;
	}

	.t3 {
		transform: translate(10%,-5%) rotate(10deg) !important;
	}

	.t4 {
		transform: translate(20%,-10%) rotate(20deg) !important;
	}

	#footer{
		background: black;
		color: white;
		font-size: 11px;
		position: absolute;
		bottom: 0%;
		left: 0%;
		width: calc(100vw - 30px);
		padding-right: 30px;
		text-align: right;
	}

	#footer a{
		color: orange;
	}

	#game_id_div{
		width: 100%;
		display: table;
		text-align: left;
	}
	#game_id_div #game_id_div span{
		display: table-cell;
		width: 30%;
	}
	#game_id_div input {
		display: table-cell;
		width: 65%;
		margin-left: 5%;
	}
</style>



<div class="menu">
	<div class="error" style="display: @isErrorVisible">
		Error: @errorMsg
	</div>
	<h1 style="font-size: 50px">Online Poker Game</h1>
	<p>Your Name: </p>
	<Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="name" @oninput="((e) => { name = e.Value?.ToString() ?? string.Empty; updateValid();})" type="text" name="name"/>
	
	<div id="game_id_div">
		<span>Game ID:</span>
		<Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="id" @oninput="((e) => {id = e.Value?.ToString() ?? string.Empty; updateValid();})" type="text" name="id" />
	</div>
	
	<button disabled="@(!IsInputValid)" @onclick="joinGame">Join Game</button>

	
	
</div>


<CardRender Class="card b1"></CardRender>
<CardRender Class="card b2"></CardRender>

@for(int i = 0; i < 2; i++)
{
	<CardRender Class="@("card h"+i)" Suit="hand[i].Suit" Value="hand[i].Value"></CardRender>
}

@for(int i = 0; i < 5; i++)
{
	<CardRender Class="@("table t"+i)" Suit="table[i].Suit" Value="table[i].Value"></CardRender>
} 


<div id="footer">
	<p>Developed by Jakob Tinhofer. Check out this project <a href="https://github.com/LightBlueFox-Labs/LightBlueFox.Games.Poker">on Github.</a> This website does not use any cookies or store any personal data.</p>
</div>