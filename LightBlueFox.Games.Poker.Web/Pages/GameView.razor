@page "/game/{gameID}/{PlayerName}"
@using LightBlueFox.Games.Poker.Web.Controllers;
@using LightBlueFox.Games.Poker;
@using System.ComponentModel;
@using Microsoft.JSInterop;
@using static LightBlueFox.Games.Poker.PlayerHandles.Remote.PokerProtocol;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NM;
@code {

	private GameController? Controller;

	public void Rerender()
	{
		InvokeAsync(() => StateHasChanged());
	}

	protected override void OnInitialized()
	{
		this.IsLoading = true;
		base.OnInitialized();
	}

	private static int INSTANCE = 0;
	private static Dictionary<int, GameView> viewsById = new();

	[JSInvokable]
	public static async void GameView_OnBeforeUnload(int instanceID)
	{
		if(viewsById.GetValueOrDefault(instanceID) is GameView view)
		{
			view.OnBeforeUnload();
		}
		else
		{
			throw new KeyNotFoundException("Trying to call event on unknown instance");
		}
	}

	[JSInvokable]
	public static async void GameView_OnUnload(int instanceID)
	{
		if (viewsById.GetValueOrDefault(instanceID) is GameView view)
		{
			view.OnUnload();
		}
		else
		{
			throw new KeyNotFoundException("Trying to call event on unknown instance");
		}
	}


	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			int id = INSTANCE++;
			viewsById.Add(id, this);
			JSRuntime.InvokeVoidAsync("addTLEventListeners", id);
			Controller = new(this);
			IsLoading = false;
			InvokeAsync(() => StateHasChanged());
		}
		return base.OnAfterRenderAsync(firstRender);
	}

	public void OnBeforeUnload()
	{
		if(Controller != null)
		{
			Controller.Disconnect();
		}
	}

	public void OnUnload()
	{
		if (Controller != null)
		{
			Controller.Disconnect();
		}
	}


	public bool IsRoundRunning { get; set; } = false;
	public bool CanStartRound
	{
		get
		{
			return Controller != null && Controller.CanStartRound;
		}
	}

	public void DisplayMainScreenError(string err)
	{
		NM?.NavigateTo("/error/" + err, true, true);
	}

	public PlayerInfo MyPlayer;
	public int MyIndex { get; set; }

	private PlayerInfo[]? __players = null;
	public PlayerInfo[] OtherPlayers { get { return __players ?? new PlayerInfo[] { }; } set { this.__players = value; rerenderPlayers(); } }

	public Card[]? TableCards { get; set; } = { };

	public Card[]? MyCards { get; set; }

	private void rerenderPlayers(bool first = false)
	{
		for (int i = 0; i < OtherPlayers.Length; i++)
		{
			var posIndx = (i + MyIndex) % (OtherPlayers.Length);
			var pIndx = OtherPlayers.Length - i - 1;
			JSRuntime.InvokeVoidAsync("adjustPlayerPos", pIndx, posIndx, OtherPlayers.Length, first);
		}
	}

	public int MinBet {get;set;} = 0;
	private int floored_minbet
	{
		get
		{
			return Math.Min(MaxBet, MinBet);
		}
	}
	public int MaxBet { get; set; } = 0;

	public PotInfo[]? Pots { get; set; }

	public PlayerInfo? WhoseTurn;

	public bool IsLoading { get; set; } = true;

	[Parameter]
	[DefaultValue("game1")]
	public string GameID { get; set; } = "game1";

	[Parameter]
	[DefaultValue("Player")]
	public string PlayerName { get; set; } = "Player";


	protected override void OnAfterRender(bool firstRender)
	{
		rerenderPlayers(true);
		base.OnAfterRender(firstRender);
	}

	public void Log(string str, params object[] args)
	{
		JSRuntime.InvokeVoidAsync("console.log", string.Format(str, args));
	}


	private TaskCompletionSource<ActionInfo>? waitingForPlayerAction;
	private PokerAction[] actions = { };


	public ActionInfo DoTurn(PokerAction[] act, int? maxBet)
	{
		MaxBet = maxBet ?? -1;
		betAmnt = floored_minbet;
		waitingForPlayerAction = new();
		actions = act;
		Rerender();
		var res = waitingForPlayerAction.Task.GetAwaiter().GetResult();
		waitingForPlayerAction = null;
		actions = new PokerAction[]{ };
		return res;
	}

	private bool betMode { get; set; } = false;
	private int betAmnt;

	private void endBetMode(EventArgs e)
	{
		betMode = false;
	}

	private void playerDoesAction(PokerAction a)
	{
		if(a == PokerAction.Raise)
		{
			betMode = true;
		}
		else
		{
			waitingForPlayerAction?.SetResult(new() {
					ActionType = a,
			});
		}
	}

	public void AbortTurn()
	{
		waitingForPlayerAction?.SetResult(new ActionInfo()
			{
				ActionType = PokerAction.Cancelled
			});
	}

	private void confirmBet(int amnt)
	{
		betMode = false;
		waitingForPlayerAction?.SetResult(new()
			{
				ActionType = PokerAction.Raise,
				BetAmount = amnt + (Controller?.LevelAmnt ?? 0),
			});
	}

	public void UpdatePlayerInfo(PlayerInfo inf, bool suppressUpdate = false)
	{
		if(inf.Name == MyPlayer.Name)
		{
			MyPlayer = inf;
		}
		for (int i = 0; i < OtherPlayers.Length; i++)
		{
			if (OtherPlayers[i].Name == inf.Name)
				OtherPlayers[i] = inf;
		}
		if(!suppressUpdate) Rerender();
	}

	public GameInfo GameInfo { get; set; }

	public RoundResult? roundEnd { get; set; } = null;

	private void roundEndContinue()
	{
		roundEnd = null;
		IsRoundRunning = false;
		MyCards = null;
		Pots = null;
		RemovePlayers((p) => !p.IsConnected);
		for(int i = 0; i < OtherPlayers.Length; i++)
		{
			OtherPlayers[i].CurrentStake = 0;
			OtherPlayers[i].Role = PlayerRole.None;
			OtherPlayers[i].Status = PlayerStatus.NotPlaying;
		}
		MyPlayer.CurrentStake = 0;
		MyPlayer.Role = PlayerRole.None;
		MyPlayer.Status = PlayerStatus.NotPlaying;
		Rerender();
	}

	public void RemovePlayers(Predicate<PlayerInfo> match)
	{
		if(IsRoundRunning) throw new InvalidOperationException("Cannot remove players while round is running");


		var l = new List<PlayerInfo>(OtherPlayers);
		l.RemoveAll(match);
		OtherPlayers = l.ToArray();
	}


	public void StartTurnTimer(PlayerInfo player, int amnt)
	{
		JSRuntime.InvokeVoidAsync("animateTurnTimer", amnt);
	}

	public void DisplayExceptionBanner(string msg)
	{
		JSRuntime.InvokeVoidAsync("alert", msg);
	}
}


<link href="/css/quickndirty.css" type="text/css" rel="stylesheet"/>

<style>

	


	html{
		background-color: darkgreen;
		overflow: hidden;
		margin:0px;
		padding:0px;
	}

	
	.playerCard{
		position: absolute;
		left: 35%;
		bottom: 0%;	
		transition: 0.3s;
	}

	
	.firstCard {
		transform: translate(10%, 70%) rotate(7deg) !important;
	}
	.secondCard {
		transform: translate(-10%, 70%) rotate(-7deg) !important;
		z-index: -1;
	}

	.firstCard:hover {
		transform: scale(1.1) translate(10%, 50%) rotate(7deg) !important;
		z-index: 8;
	}

	.secondCard:hover {
		transform: scale(1.1) translate(-10%, 50%) rotate(-7deg) !important;
		z-index: 8;
	}
	
	.tableCards{
		position: absolute;
		top: 50%;
		left:50%;
		transform: translate(-50%,-50%);
		width: 50%;
		height: 40%;
		z-index: 0;
	}
	#player_ellipse{
		position:absolute;
		top:50%;
		left:50%;
		z-index: -2;
		transform: translate(-50%,-50%);
	}
	#player_ellipse ellipse{
		fill:black;
		opacity: 10%;
		transform: translate(50%,50%);
	}

	.table-info{
		transform: translate(0%, 50%);
		width: 90%;
		margin-left: calc(5% - 15px);
		background: white;
		display: table;
		border-radius: 5px;
		padding: 15px;
		table-layout: fixed;
	}

	.table-info p {
		display: table-cell;
	}

	.loading_overlay{
		position:absolute;
		top:50%;
		left:50%;
		transform: translate(-50%,-50%);
		width: 100vw;
		height: 100vh;
		background: black;
		opacity: 90%;
		z-index: 1000;
	}
	.loading_overlay p{
		position: absolute;
		left: 50%;
		top: 40%;
		transform: translate(-50%, -50%);
		color: white;
		font-size: 40px;
	}


	#userActionQuerryContainer {
		position: absolute;
		top:70%;
		background: white;
		left:50%;
		border-radius: 10px 10px 5px 5px;
		transform: translate(-50%,0%);
		z-index: 1000;
	}

	#actionTable{
		display: table;
		table-layout: fixed;
		border-top: 1px solid grey;
	}

	#userActionQuerryContainer h3{
		padding: 10px 10px 5px 10px;
		margin: 0px;
		background-color: royalblue;
		border-radius: 7px 7px 0px 0px;
	}

	#userActionQuerryContainer button {
		display: table-cell;
		background: none;
		padding: 30px;
		margin: 0px;
		border: none;
		border-radius: 0px 0px 5px 5px;
		font-size: 20px;
		box-shadow: none;
		transition: background 0.3s;
		width: 10vw;
	}


	#userActionQuerryContainer button:hover {
		background-color: lightgrey;
	}

	#betInput{
		width: 30vw;
		display: table;
	}

	#sliderDiv{
		display: table-cell;
		padding: 20px;
		position:relative;
		width: 20vw;
		margin: 20px;
	}
	#sliderDiv input{
		
		width: calc(100%);
	}

	#betInput .betLabel{
		position: absolute;
		background: black;
		color: white;
		border-radius: 5px;
		padding: 6px;
	}

	#betInput .betLabel::after {
	  content: "";
	  position: absolute;
	  top: 100%;
	  left: 50%;
	  margin-left: -5px;
	  border-width: 5px;
	  border-style: solid;
	  border-color: black transparent transparent transparent;
	}


	#minBetLabel{
		left: 20px;
		transform: translate(-50%, -230%);
	}

	#maxBetLabel{
		right: 20px;
		transform: translate(50%,-230%);
	}

	.bet object{
		display: inline-block !important;
		height: 30px;
		width: 30px;
		position: absolute;
		top: 50%;
		right: 1%;
		transform: translate(0%, -50%);
	}

	#game_info{
		display: table;
		background: black;
		color: white;
		position: absolute;
		top: 0px;
		left: 0px;
		transition: 0.3s ease-in-out;
	}
	#game_info p{
		display: table-cell;
		padding: 10px;
	}

	#startGame{
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		padding: 25px;
		font-size: 30px;
		color: white;
		background: #4287f5;
		border: none;
		border-radius: 5px;
	}

	#startGame:disabled{
		background: grey;
	}

	#startGame:not(:disabled):hover{
		font-size: 35px;
		background: #1b66de;
	}

	#doesTurn_progressbar {
		position: absolute;
		width: 0%;
		height: 100%;
		left: 0px;
		top: 0px;
		background: #34eb55;
		border-radius: 5px 5px 0px 0px;
	}


</style>



<script>
	function adjustPlayerPos(playerIndex, posIndex, playerCount, first) {
		var p = document.getElementById("player_" + playerIndex);
		if (p == null) return;

		var rect = document.getElementById("__ellipse").getBoundingClientRect();
		var step = (2 * Math.PI / ( playerCount + 1 ));
		var angle = - step * (posIndex + 1) + Math.PI / 2;

		

		
		var x = (rect.width / 2) * Math.cos(angle) + (window.innerWidth / 2);
		var y = (rect.height / 2) * Math.sin(angle) + (window.innerHeight / 2);
		
		
		p.style.position = "absolute";
		p.style.left = x + "px";
		p.style.top = y + "px";

		if (first) {
			addEventListener("resize", () => {
				adjustPlayerPos(playerIndex, posIndex, playerCount, false);
			});
		}
	}



	function addTLEventListeners(id) {
		window.addEventListener("beforeunload", () => {
			DotNet.invokeMethodAsync("LightBlueFox.Games.Poker.Web", "GameView_OnBeforeUnload", id);
		});
		window.addEventListener("unload", () => {
			DotNet.invokeMethodAsync("LightBlueFox.Games.Poker.Web", "GameView_OnUnload", id);
		});
	}

	var turnTimerAnimatorID = null;
	var turnTimerRemaining = 0;
	var totalTurnTimer = 0;
	var origTime;

	function animateTurnTimer(amnt) {
		var elem = document.getElementById("doesTurn_progressbar");
		elem.style.width = "100%";
		turnTimerRemaining = amnt;
		totalTurnTimer = amnt;
		origTime = new Date();
		if (!turnTimerAnimatorID) {
			turnTimerAnimatorID = setInterval(progressFrame, 20);
		}
		
	}

	function progressFrame() {
		turnTimerRemaining = totalTurnTimer - ((new Date()).getTime() - origTime.getTime());
		var elem = document.getElementById("doesTurn_progressbar");

		if (elem == null) {
			turnTimerRemaining = 0;
			totalTurnTimer = 0;
			clearInterval(turnTimerAnimatorID);
			turnTimerAnimatorID = null;
			origTime = null;
		}else if (turnTimerRemaining <= 0) {
			turnTimerRemaining = 0;
			totalTurnTimer = 0;
			elem.style.width = "0%";
			clearInterval(turnTimerAnimatorID);
			turnTimerAnimatorID = null;
			origTime = null;
		} else {
			elem.style.width = ((turnTimerRemaining / totalTurnTimer) * 100) + "%";
		}
	}
</script>

<div style="@(IsLoading ? "" : "display: none")" class="loading_overlay">
	<p>Loading...</p>
</div>


@if (waitingForPlayerAction != null)
{
	<div class="@(betMode ? "bet" : "action")" id="userActionQuerryContainer">
		<div style="position: relative;" @onmousedown="endBetMode">
			<h3>Your Turn:</h3>
			<object style="display: none; pointer-events: none" data="/resc/icons/cancel.svg" type="image/svg+xml" />
		</div>

		@if (betMode)
		{
			<div id="betInput">
				<div id="sliderDiv">
					<input @oninput="((e)=> betAmnt = int.Parse((string)e.Value))" type="range" step="5" min="@floored_minbet" max="@MaxBet" value="@floored_minbet" />
					<p class="betLabel" id="minBetLabel">@floored_minbet</p>
					<p class="betLabel" id="maxBetLabel">@MaxBet</p>
				</div>
				<button @onclick="(e) => confirmBet(betAmnt)">Bet @betAmnt @(Controller?.LevelAmnt != null ? "(+"  + Controller.LevelAmnt + ")": "")</button>
			</div>
		}
		else
		{
			<div id="actionTable">
				@foreach(var a in actions)
				{
					<button @onclick="(e) => playerDoesAction(a)">@a.ToString() @(a == PokerAction.Call && Controller?.LevelAmnt != null ? "(" + Controller.LevelAmnt + ")" : "")</button>
				}
				
			</div>
		}
	</div>
}

@if(MyCards != null && MyCards.Length == 2)
{
	<CardRender Class="playerCard firstCard" Scale="1" Value="MyCards[0].Value" Suit="MyCards[0].Suit"></CardRender>
	<CardRender Class="playerCard secondCard" Scale="1" Value="MyCards[1].Value" Suit="MyCards[1].Suit"></CardRender>
}

<RoundResultBanner NextRound="roundEndContinue" Result="roundEnd"/>

@if (IsRoundRunning)
{
	<div class="tableCards">
		<PotInfoDisplay Pots="Pots" IsCollapsed=false MinBet="MinBet"/>
		<div style="position: relative">
			@for (int i = 0; i < 5; i++)
			{
				@if (TableCards == null || TableCards.Length <= i)
				{
					<CardRender Style="@("position: absolute; left: " + (-2.5 + i * 20) + "%;")" Scale="0.8"></CardRender>
				}
				else
				{
					<CardRender Style="@("position: absolute; left: " + (-2.5 + i * 20) + "%;")" Value="TableCards[i].Value" Suit="TableCards[i].Suit" Scale="0.8"></CardRender>
				}
			}
		</div>

	</div>
}
else
{
	<button id="startGame" @onclick="((e) => { if(CanStartRound) { Controller?.StartGame(); } })" disabled="@(!CanStartRound)">@(CanStartRound ? "Start Round!" : "Waiting for players...")</button>
}





<svg id="player_ellipse" width="100%" height="100%">
	<ellipse id="__ellipse" rx="40%" ry="40%">

	</ellipse>
</svg>

<div id="game_info">
	<p>Game ID: @GameInfo.ID</p>
	<p>SB: @GameInfo.SmallBlind</p>
	<p>BB: @GameInfo.BigBlind</p>
</div>

<div id="players">
	@foreach (var p in OtherPlayers)
	{
		<PlayerDisplay Player="p" 
					DisplayCards=IsRoundRunning 
					IsTurn="(WhoseTurn != null && WhoseTurn.Value.Name == p.Name)" 
					Cards="(IsRoundRunning && roundEnd != null && roundEnd.Summaries.Where((pi) => pi.Player.Name == p.Name) is var pi && pi.Count() > 0 && pi.First().CardsVisible && pi.First().Cards.Length == 2) ? pi.First().Cards : null" 
					Index="Array.IndexOf(OtherPlayers, p)"
					Pots="Pots"/>
	}
</div>

<PlayerDisplay Player="MyPlayer" DisplayCards=false IsTurn="(WhoseTurn != null && WhoseTurn.Value.Name == PlayerName)" Pots="Pots" Index="null"/>
